{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Authentication\n",
    "\n",
    "In previous tutorials we focused on Control-M Workbench where authentication is not an issue. In real environments, authentication is necessary and it is essential to follow best practice to prevent a leak of sensitive information.\n",
    "\n",
    "Authentication is needed to work with the backend of Control-M. The authentication is done by default at the creation of a `Workflow`. You can skip the initial authentication if, for example, you want to code a workflow without the intent of running it immediately.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Environments\n",
    "\n",
    "An `Environment` is an object passed to the `Workflow` during its construction. The environment defines the Control-M endpoint which is the endpoint where Automation API is installed, ehich is the same endpoint of Control-M/EM. When you create an environment you need to specify the credentials to be used during authentication and the `EnvironmentMode`\n",
    "\n",
    "There are two methods of authentication used in Control-M: username+password and API key. When you construct an Environment, you can either specify a combination of username and password or an API key.\n",
    "\n",
    "The `EnvironmentMode` serves to indicate if the backend is of type Control-M or Helix Control-M (Control-M SaaS). This is important since the backend APIs are slightly different. You can specify the mode in the constructor or use the static method `Environment.create_onprem()` or `Environment.create_saas()`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Examples of Environments\n",
    "from ctm_python_client.core.workflow import *\n",
    "from ctm_python_client.core.comm import *\n",
    "from ctm_python_client.core.credential import *\n",
    "\n",
    "# Create an environment for Control-M\n",
    "my_environment = Environment('https://mymachine:8443/automation-api', username='user', password='password', mode=EnvironmentMode.ONPREM)\n",
    "\n",
    "# which is the same:\n",
    "# Note that OnPrem environment by default use the port 8443, if another port is used, you can specify it\n",
    "my_environment = Environment.create_onprem('mymachine',username='user', password='password')\n",
    "\n",
    "# Create an environment for Helix Control-M (SaaS)\n",
    "my_environment = Environment.create_saas('https://mysaas-aapi/automation-api', api_key='myapikey')\n",
    "\n",
    "# Create an environment to work with Control-M Workbench\n",
    "\n",
    "# by default sets host to localhost and port to 8443\n",
    "my_environment = Environment.create_workbench()\n",
    "\n",
    "# If wokrbench is running on a remote machine, you can specify the host\n",
    "my_environment = Environment.create_workbench(host='mymachine')\n",
    "\n",
    "# In the case the port 8443 is mapped to another port (for example multiple instances of a workbench container), you can specify the port\n",
    "my_environment = Environment.create_workbench(host='mymachine', port='8444')\n",
    "\n",
    "\n",
    "workflow = Workflow(my_environment)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "## Credentials\n",
    "\n",
    "Control-M Python Client has an abstract class called `AbstractCredentials` with two methods: `get_username()` and `get_password()`. During authentication, those methods are called. \n",
    "If the authentication is done via API key, then only `get_password()` is called. \n",
    "\n",
    "When creating an Environment, you are required to provide Credentials. Control-M Python Client has some implementations which you can use.\n",
    "\n",
    "- `SimpleCredentials`: Allows you provide the username and password directly during the creation. This is the least secure way of creating a credential since the password (or API key) is written in plain text.\n",
    "\n",
    "- `InputPasswordCredentials`: Allows you to input the password during the execution of the code. This is more secure since the password is not in the document, but can disrupt automated process since it requires the intervention of the user.\n",
    "\n",
    "- `KeyringCredentials` (in the `ext` package): Uses the keyring library which leverages secure backends from the operating system to store passwords.\n",
    "\n",
    "- Your own: It would be impossible to code every way of getting passwords and you may have a vault service or a specific company policy for storing passwords. In this case, the easiest way is to implement your own credentials based on `AbstractCredentials`, and use your custom implementation as the credentials passed in the environment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "from ctm_python_client.core.workflow import *\n",
    "from ctm_python_client.core.comm import *\n",
    "from ctm_python_client.core.credential import *\n",
    "\n",
    "# example of creating an workflow for Control-M with username and password:\n",
    "workflow = Workflow(\n",
    "    Environment.create_onprem('mhyHost', credentials=InputPasswordCredentials('myuser'))\n",
    ")\n",
    "\n",
    "# example of creating an workflow for Helix Control-M with an API key:\n",
    "workflow = Workflow(\n",
    "    Environment.create_saas('mhyHost', credentials=InputPasswordCredentials('token'))\n",
    ")\n",
    "\n",
    "# example with using Keyring\n",
    "# make sure you have keyring installed: pip install keyring\n",
    "from ctm_python_client.ext.credential import KeyringCredentials\n",
    "\n",
    "# on a terminal run:\n",
    "# keyring set servicename username \n",
    "# servicename is not used in the authentication but is useful to distinguish between multiple environments\n",
    "# example:\n",
    "# keyring set development myuser\n",
    "# keyring set production myuser\n",
    "# you also can do the same in python\n",
    "import keyring\n",
    "keyring.set_password('production', 'username')\n",
    "\n",
    "# if using API key, the password is the key, and the username is not used, so you can put any value \n",
    "# that seems significant for you\n",
    "# example:\n",
    "# keyring set development tokenAdmin\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "fee4815530b448cf07eed8a0acf2f30173132c0b950673e71028e682e87e1cd9"
  },
  "kernelspec": {
   "display_name": "Python 3.7.0 ('venv': venv)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
